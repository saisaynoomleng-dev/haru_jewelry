/**
 * ---------------------------------------------------------------------------------
 * This file has been generated by Sanity TypeGen.
 * Command: `sanity typegen generate`
 *
 * Any modifications made directly to this file will be overwritten the next time
 * the TypeScript definitions are generated. Please make changes to the Sanity
 * schema definitions and/or GROQ queries if you need to update these types.
 *
 * For more information on how to use Sanity TypeGen, visit the official documentation:
 * https://www.sanity.io/docs/sanity-typegen
 * ---------------------------------------------------------------------------------
 */

// Source: schema.json
export type SanityImagePaletteSwatch = {
  _type: "sanity.imagePaletteSwatch";
  background?: string;
  foreground?: string;
  population?: number;
  title?: string;
};

export type SanityImagePalette = {
  _type: "sanity.imagePalette";
  darkMuted?: SanityImagePaletteSwatch;
  lightVibrant?: SanityImagePaletteSwatch;
  darkVibrant?: SanityImagePaletteSwatch;
  vibrant?: SanityImagePaletteSwatch;
  dominant?: SanityImagePaletteSwatch;
  lightMuted?: SanityImagePaletteSwatch;
  muted?: SanityImagePaletteSwatch;
};

export type SanityImageDimensions = {
  _type: "sanity.imageDimensions";
  height?: number;
  width?: number;
  aspectRatio?: number;
};

export type SanityFileAsset = {
  _id: string;
  _type: "sanity.fileAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  source?: SanityAssetSourceData;
};

export type Geopoint = {
  _type: "geopoint";
  lat?: number;
  lng?: number;
  alt?: number;
};

export type Blog = {
  _id: string;
  _type: "blog";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  slug?: Slug;
  publishedAt?: string;
  author?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "author";
  };
  duration?: number;
  category?: string;
  description?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "normal" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "blockquote";
    listItem?: "bullet" | "number";
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  } | {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
    _key: string;
  }>;
  image?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
  };
};

export type Author = {
  _id: string;
  _type: "author";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: string;
  slug?: Slug;
  bio?: string;
  image?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
  };
};

export type NavItem = {
  _id: string;
  _type: "navItem";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: string;
  url?: string;
};

export type NavLink = {
  _id: string;
  _type: "navLink";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: string;
  url?: string;
  branch?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "navItem";
  }>;
};

export type NavMenu = {
  _id: string;
  _type: "navMenu";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: string;
  slug?: Slug;
  links?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "navLink";
  }>;
};

export type BlockContent = Array<{
  children?: Array<{
    marks?: Array<string>;
    text?: string;
    _type: "span";
    _key: string;
  }>;
  style?: "normal" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "blockquote";
  listItem?: "bullet" | "number";
  markDefs?: Array<{
    href?: string;
    _type: "link";
    _key: string;
  }>;
  level?: number;
  _type: "block";
  _key: string;
} | {
  asset?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
  };
  hotspot?: SanityImageHotspot;
  crop?: SanityImageCrop;
  alt?: string;
  _type: "image";
  _key: string;
}>;

export type Review = {
  _id: string;
  _type: "review";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  rating?: 1 | 2 | 3 | 4 | 5;
  description?: BlockContent;
};

export type Size = {
  _id: string;
  _type: "size";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: string;
  slug?: Slug;
};

export type Color = {
  _id: string;
  _type: "color";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: string;
  slug?: Slug;
};

export type Tag = {
  _id: string;
  _type: "tag";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: string;
  slug?: Slug;
};

export type Category = {
  _id: string;
  _type: "category";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: string;
  slug?: Slug;
};

export type Product = {
  _id: string;
  _type: "product";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: string;
  slug?: Slug;
  category?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "category";
  }>;
  brand?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "brand";
  };
  price?: number;
  discount?: number;
  tags?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "tag";
  }>;
  instock?: number;
  color?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "color";
  }>;
  size?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "size";
  }>;
  warranty?: boolean;
  reviews?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "review";
  }>;
  images?: Array<{
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
    _key: string;
  }>;
  description?: BlockContent;
};

export type SanityImageCrop = {
  _type: "sanity.imageCrop";
  top?: number;
  bottom?: number;
  left?: number;
  right?: number;
};

export type SanityImageHotspot = {
  _type: "sanity.imageHotspot";
  x?: number;
  y?: number;
  height?: number;
  width?: number;
};

export type SanityImageAsset = {
  _id: string;
  _type: "sanity.imageAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  metadata?: SanityImageMetadata;
  source?: SanityAssetSourceData;
};

export type SanityAssetSourceData = {
  _type: "sanity.assetSourceData";
  name?: string;
  id?: string;
  url?: string;
};

export type SanityImageMetadata = {
  _type: "sanity.imageMetadata";
  location?: Geopoint;
  dimensions?: SanityImageDimensions;
  palette?: SanityImagePalette;
  lqip?: string;
  blurHash?: string;
  hasAlpha?: boolean;
  isOpaque?: boolean;
};

export type Brand = {
  _id: string;
  _type: "brand";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: string;
  slug?: Slug;
};

export type Slug = {
  _type: "slug";
  current?: string;
  source?: string;
};

export type AllSanitySchemaTypes = SanityImagePaletteSwatch | SanityImagePalette | SanityImageDimensions | SanityFileAsset | Geopoint | Blog | Author | NavItem | NavLink | NavMenu | BlockContent | Review | Size | Color | Tag | Category | Product | SanityImageCrop | SanityImageHotspot | SanityImageAsset | SanityAssetSourceData | SanityImageMetadata | Brand | Slug;
export declare const internalGroqTypeReferenceTo: unique symbol;
// Source: ./src/sanity/lib/queries.ts
// Variable: PRODUCTS_QUERY
// Query: *[_type == 'product'   && defined(slug.current)][0...9]{    name,    slug,    images[]{      asset->{        url      }    },    price,    brand->{      name    },    discount,    instock,    reviews[]->{      rating    }   } | order(name)
export type PRODUCTS_QUERYResult = Array<{
  name: string | null;
  slug: Slug | null;
  images: Array<{
    asset: {
      url: string | null;
    } | null;
  }> | null;
  price: number | null;
  brand: {
    name: string | null;
  } | null;
  discount: number | null;
  instock: number | null;
  reviews: Array<{
    rating: 1 | 2 | 3 | 4 | 5 | null;
  }> | null;
}>;
// Variable: PRODUCT_QUERY
// Query: *[_type == 'product' && slug.current == $slug][0]{  name,  category[]->{    name  },  reviews[]->{    title,    rating,    description},  price,  discount,  warranty,  tags[]->{    name  },  description,  instock,  images[]{    asset->{      url    },  },  brand->{    name  },  color[]->{    name  },  size[]->{    name  } }
export type PRODUCT_QUERYResult = {
  name: string | null;
  category: Array<{
    name: string | null;
  }> | null;
  reviews: Array<{
    title: string | null;
    rating: 1 | 2 | 3 | 4 | 5 | null;
    description: BlockContent | null;
  }> | null;
  price: number | null;
  discount: number | null;
  warranty: boolean | null;
  tags: Array<{
    name: string | null;
  }> | null;
  description: BlockContent | null;
  instock: number | null;
  images: Array<{
    asset: {
      url: string | null;
    } | null;
  }> | null;
  brand: {
    name: string | null;
  } | null;
  color: Array<{
    name: string | null;
  }> | null;
  size: Array<{
    name: string | null;
  }> | null;
} | null;
// Variable: BLOGS_QUERY
// Query: *[_type == 'blog' && defined(slug.current)][0...3]{  title,  slug,  publishedAt,  author->{    name,  },  duration,  category,  description,  image{    asset->{      url    },    alt  } } | order(publishedAt desc)
export type BLOGS_QUERYResult = Array<{
  title: string | null;
  slug: Slug | null;
  publishedAt: string | null;
  author: {
    name: string | null;
  } | null;
  duration: number | null;
  category: string | null;
  description: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "normal";
    listItem?: "bullet" | "number";
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  } | {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
    _key: string;
  }> | null;
  image: {
    asset: {
      url: string | null;
    } | null;
    alt: string | null;
  } | null;
}>;
// Variable: BLOG_QUERY
// Query: *[_type == 'blog' && slug.current == $slug][0]{  title,  publishedAt,  author->{    name,    image{      asset->{        url      },      alt    },    bio  },  duration,  category,  description,  image{    asset->{      url    },    alt  } }
export type BLOG_QUERYResult = {
  title: string | null;
  publishedAt: string | null;
  author: {
    name: string | null;
    image: {
      asset: {
        url: string | null;
      } | null;
      alt: string | null;
    } | null;
    bio: string | null;
  } | null;
  duration: number | null;
  category: string | null;
  description: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "normal";
    listItem?: "bullet" | "number";
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  } | {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
    _key: string;
  }> | null;
  image: {
    asset: {
      url: string | null;
    } | null;
    alt: string | null;
  } | null;
} | null;

// Query TypeMap
import "@sanity/client";
declare module "@sanity/client" {
  interface SanityQueries {
    "*[_type == 'product'\n   && defined(slug.current)][0...9]{\n    name,\n    slug,\n    images[]{\n      asset->{\n        url\n      }\n    },\n    price,\n    brand->{\n      name\n    },\n    discount,\n    instock,\n    reviews[]->{\n      rating\n    }\n   } | order(name) ": PRODUCTS_QUERYResult;
    "*[_type == 'product'\n && slug.current == $slug][0]{\n  name,\n  category[]->{\n    name\n  },\n  reviews[]->{\n    title,\n    rating,\n    description},\n  price,\n  discount,\n  warranty,\n  tags[]->{\n    name\n  },\n  description,\n  instock,\n  images[]{\n    asset->{\n      url\n    },\n  },\n  brand->{\n    name\n  },\n  color[]->{\n    name\n  },\n  size[]->{\n    name\n  }\n }": PRODUCT_QUERYResult;
    "*[_type == 'blog'\n && defined(slug.current)][0...3]{\n  title,\n  slug,\n  publishedAt,\n  author->{\n    name,\n  },\n  duration,\n  category,\n  description,\n  image{\n    asset->{\n      url\n    },\n    alt\n  }\n } | order(publishedAt desc)": BLOGS_QUERYResult;
    "*[_type == 'blog'\n && slug.current == $slug][0]{\n  title,\n  publishedAt,\n  author->{\n    name,\n    image{\n      asset->{\n        url\n      },\n      alt\n    },\n    bio\n  },\n  duration,\n  category,\n  description,\n  image{\n    asset->{\n      url\n    },\n    alt\n  }\n } ": BLOG_QUERYResult;
  }
}
